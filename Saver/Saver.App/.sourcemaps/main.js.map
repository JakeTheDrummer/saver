{"version":3,"sources":["../../node_modules/@angular/core/src/linker lazy","../../src/pages/dashboard/dashboard.ts","../../src/services/saverservice.ts","../../src/app/main.ts","../../src/app/app.module.ts","../../src/app/app.component.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 227;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/core/src/linker lazy\n// module id = 227\n// module chunks = 0","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { Nav, NavController } from 'ionic-angular';\r\nimport { Goal } from '../../model/goal';\r\nimport { SaverService } from '../../services/saverservice';\r\n\r\n@Component({\r\n  selector: 'page-dashboard',\r\n  templateUrl: 'dashboard.html'\r\n})\r\nexport class Dashboard {\n  goals: Goal[];\r\n\r\n  constructor(public navController: Nav, private saverService: SaverService) {\r\n  }\n  \n  /**\n   * Loads the goals for the user of the application*/\n  public loadGoals() : void {\n    this.goals = this.saverService.getGoalsFor(1);\r\n  }\n  \r\n  onLink(url: string) {\r\n    window.open(url);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/dashboard/dashboard.ts","import { String, StringBuilder } from 'typescript-string-operations';\r\nimport * as $ from \"jquery\";\r\nimport { Goal } from '../model/goal';\r\nimport { ISaverService } from './saverserviceinterface';\r\nimport { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Provides access to the saver service*/\r\n@Injectable()\r\nexport class SaverService implements ISaverService {\r\n  baseURI: string;\r\n\r\n  //Provides a collection of API endpoints for the API\r\n  private methodEndpoints: { [key: string]: string; } = {\r\n    'getGoalsForUser': 'users/{userId}/goals'\r\n  };\r\n\r\n  /**\r\n    * Creates a new saver service client with the given\r\n    * endpoint as the communication base\r\n    * @param baseAddressUri The base address of the service\r\n    */\r\n  constructor(baseAddressUri: string) {\n    this.baseURI = baseAddressUri;\n  }\n  /**\n    * Returns the base URI of this saver service proxy\n    * */\n  public baseUri(): string {\r\n    return this.baseURI;\r\n  }\r\n\r\n  /**\r\n    * Returns the goals for a given user\r\n    * @param userId The ID of the user that has the goals\r\n    */\r\n  public getGoalsFor(userId: number) : Goal[] {\r\n\r\n    //Collect the endpoint\r\n    var params = { \"userId\": userId };\r\n    var endpoint = this.getEndpoint(\"getGoalsFor\", params);\r\n\r\n    var goals = this.get<Goal[]>(endpoint);\r\n    return goals;\r\n  }\r\n\r\n  /**\r\n    * Returns data of the given TResult type from the endpoint\r\n    * @param endpoint The endpoint from which we should load data\r\n    */\r\n  private get<TResult>(endpoint: string) {\r\n    var result: TResult;\r\n    $.getJSON(endpoint, res => {\r\n      result = <TResult>res;\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n    * Returns the API endpoint that should be called with the\r\n    * params for the given method name\r\n    * @param methodName The method name that we are calling from\r\n    * @param params The collection of parameters for the query\r\n    */\r\n  private getEndpoint(methodName, params) {\r\n\r\n    //Parameterise and return\r\n    var methodEndpoint = this.methodEndpoints[methodName];\r\n    methodEndpoint = this.parameterise(methodEndpoint, params);\r\n    return this.baseURI + \"/\" + methodEndpoint;\r\n  }\r\n\r\n  /**\r\n    * Parameterises the endpoint that is given with the parameters\r\n    * @param apiEndpoint The endpoint that should be parameterised\r\n    * @param params The parameters that should be applied to the endpoint\r\n    */\r\n  private parameterise(apiEndpoint, params: string[]) {\r\n\r\n    //Parameterise each of the elements\r\n    apiEndpoint = String.Format(apiEndpoint, params);\r\n    return apiEndpoint;\r\n  }\r\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/saverservice.ts","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { AppModule } from './app.module';\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/main.ts","import { NgModule, ErrorHandler } from '@angular/core';\r\nimport { IonicApp, IonicModule, IonicErrorHandler } from 'ionic-angular';\r\nimport { MyApp } from './app.component';\r\nimport { Dashboard } from '../pages/dashboard/dashboard';\r\nimport { SaverService } from '../services/saverservice';\r\nimport { ISaverService } from '../services/saverserviceinterface';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MyApp,\r\n    Dashboard\r\n  ],\r\n  imports: [\r\n    IonicModule.forRoot(MyApp)\r\n  ],\r\n  bootstrap: [IonicApp],\r\n  entryComponents: [\r\n    MyApp,\r\n    Dashboard\r\n  ],\r\n  providers: [\n    { provide: ErrorHandler, useClass: IonicErrorHandler },\n    { provide: SaverService, useFactory: () => { new SaverService('http://localhost/saverservice/api') } }\n  ]\n})\r\nexport class AppModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Component, ViewChild } from '@angular/core';\r\nimport { Nav, Platform } from 'ionic-angular';\r\nimport { StatusBar, Splashscreen } from 'ionic-native';\r\nimport { Dashboard } from '../pages/dashboard/dashboard';\r\nimport { SaverService } from '../services/saverservice';\r\n\r\n\r\n@Component({\r\n  templateUrl: 'app.html'\r\n})\r\nexport class MyApp {\r\n  @ViewChild(Nav) nav: Nav;\r\n  \r\n  rootPage: any = Dashboard;\r\n  pages: Array<{title: string, component: any}>;\r\n\r\n  constructor(public platform: Platform) {\r\n    this.initializeApp();\r\n\r\n    // used for an example of ngFor and navigation\r\n    this.pages = [\r\n      { title: 'Dashboard', component: Dashboard }\r\n    ];\r\n\r\n  }\r\n\r\n  initializeApp() {\r\n    this.platform.ready().then(() => {\r\n      // Okay, so the platform is ready and our plugins are available.\r\n      // Here you can do any higher level native things you might need.\n\n\n\r\n      StatusBar.styleDefault();\r\n      Splashscreen.hide();\r\n    });\r\n  }\r\n\r\n  openPage(page) {\r\n    // Reset the content nav to have just this page\r\n    // we wouldn't want the back button to show in this scenario\r\n    this.nav.setRoot(page.component);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts"],"sourceRoot":""}